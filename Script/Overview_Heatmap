import os
import pandas as pd
import duckdb
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def generate_benchmark_heatmap(pivot_table, output_path):
    plt.figure(figsize=(10, 6))
    sns.heatmap(pivot_table, annot=True, cmap="coolwarm", center=0, fmt=".1f")
    plt.title("Deviation from Expected Benchmark by Category Tier")
    plt.ylabel("Department")
    plt.xlabel("Category")
    plt.tight_layout()
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    plt.savefig(output_path, dpi=300, bbox_inches="tight")
    plt.show()



df = pd.read_csv("SmallCompany.csv")

# Register the pandas DataFrame for DuckDB SQL
duckdb.register("df", df)

df_dept_cat = duckdb.query("""
    WITH
    dept_totals AS (
        SELECT department, SUM(amount) AS dept_total
        FROM df
        GROUP BY department
    ),
    category_spend AS (
        SELECT department, category, SUM(amount) AS category_total
        FROM df
        GROUP BY department, category
    ),
    all_pairs AS (
        SELECT DISTINCT d.department, c.category
        FROM (SELECT DISTINCT department FROM df) d
        CROSS JOIN (SELECT DISTINCT category FROM df) c
    )
    SELECT
        ap.department,
        ap.category,
        ROUND(100.0 * COALESCE(cs.category_total, 0) / dt.dept_total, 2) AS percent_of_dept_spend
    FROM all_pairs ap
    JOIN dept_totals dt ON ap.department = dt.department
    LEFT JOIN category_spend cs
        ON ap.department = cs.department
       AND ap.category = cs.category
    ORDER BY ap.department, ap.category
""").df()


expected_tiers = {
        ('Engineering', 'Meals'): 'Low',
        ('Engineering', 'Office Supplies'): 'Medium–Low',
        ('Engineering', 'Software'): 'High',
        ('Engineering', 'Training'): 'Medium–High',
        ('Engineering', 'Travel'): 'Low',

        ('Marketing', 'Meals'): 'High',
        ('Marketing', 'Office Supplies'): 'Medium',
        ('Marketing', 'Software'): 'Medium–High',
        ('Marketing', 'Training'): 'Medium',
        ('Marketing', 'Travel'): 'High',

        ('Sales', 'Meals'): 'High',
        ('Sales', 'Office Supplies'): 'Low',
        ('Sales', 'Software'): 'Medium–High',
        ('Sales', 'Training'): 'Medium–High',
        ('Sales', 'Travel'): 'High',

        ('HR', 'Meals'): 'Medium',
        ('HR', 'Office Supplies'): 'Medium',
        ('HR', 'Software'): 'Low',
        ('HR', 'Training'): 'High',
        ('HR', 'Travel'): 'Medium',

        ('IT', 'Meals'): 'Low',
        ('IT', 'Office Supplies'): 'Medium',
        ('IT', 'Software'): 'High',
        ('IT', 'Training'): 'High',
        ('IT', 'Travel'): 'High', 
}


tier_midpoints = {
    "Low": 10,
    "Medium–Low": 30,
    "Medium": 50,
    "Medium–High": 70,
    "High": 90,
}


df_dept_cat["expected_tier"] = df_dept_cat.apply(
    lambda r: expected_tiers.get((r["department"], r["category"])),
    axis=1
)
df_dept_cat["expected_midpoint"] = df_dept_cat["expected_tier"].map(tier_midpoints)


missing = df_dept_cat[df_dept_cat["expected_midpoint"].isna()][["department","category"]].drop_duplicates()
if not missing.empty:
    raise ValueError(f"Missing from expected_tiers: {missing.values.tolist()}")

 
df_dept_cat["deviation"] = df_dept_cat["percent_of_dept_spend"] - df_dept_cat["expected_midpoint"]


pivot_dev = (
    df_dept_cat
    .pivot(index="department", columns="category", values="deviation")
    .fillna(0.0)
    .sort_index()
)


generate_benchmark_heatmap(pivot_dev, "Charts/Deviation_Heatmap.png")


