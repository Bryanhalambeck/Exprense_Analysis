import os
import pandas as pd
import duckdb
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def generate_benchmark_heatmap(pivot_table, output_path):
    plt.figure(figsize=(10, 6))
    sns.heatmap(pivot_table, annot=True, cmap="coolwarm", center=0, fmt=".1f")
    plt.title("Deviation from Expected Benchmark by Category Tier")
    plt.ylabel("Department")
    plt.xlabel("Category")
    plt.tight_layout()
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    plt.savefig(output_path, dpi=300, bbox_inches="tight")
    plt.show()

if __name__ == "__main__":

 df = pd.read_csv("SmallCompany.csv")

df_dept_cat = duckdb.query("""
        WITH dept_totals AS (
            SELECT department, SUM(amount) AS dept_total
            FROM df
            GROUP BY department
        ),

        category_spend AS (
            SELECT department, category, SUM(amount) AS category_total
            FROM df
            GROUP BY department, category
        )

        SELECT
            cs.department,
            cs.category,
            ROUND(100.0 * cs.category_total / dt.dept_total, 2) AS percent_of_dept_spend
        FROM category_spend cs
        JOIN dept_totals dt
        ON cs.department = dt.department
    """).df() 

category_avg = df_dept_cat.groupby('category')['percent_of_dept_spend'].mean().round(2)
df_dept_cat['deviation_from_avg'] = df_dept_cat['percent_of_dept_spend'] - df_dept_cat['category'].map(category_avg)

pivot_dev = df_dept_cat.pivot(index='department', columns='category', values='deviation_from_avg').fillna(0)

deviation_values = pivot_dev.values.flatten()
sorted_dev = np.sort(deviation_values[~np.isnan(deviation_values)])

q20 = np.percentile(sorted_dev, 20)
q40 = np.percentile(sorted_dev, 40)
q60 = np.percentile(sorted_dev, 60)
q80 = np.percentile(sorted_dev, 80)

g1_mid = np.mean(sorted_dev[sorted_dev <= q20])
g2_mid = np.mean(sorted_dev[(sorted_dev > q20) & (sorted_dev <= q40)])
g3_mid = np.mean(sorted_dev[(sorted_dev > q40) & (sorted_dev <= q60)])
g4_mid = np.mean(sorted_dev[(sorted_dev > q60) & (sorted_dev <= q80)])
g5_mid = np.mean(sorted_dev[sorted_dev > q80])

expected_tiers = {
        ('Engineering', 'Meals'): 'Low',
        ('Engineering', 'Office Supplies'): 'Medium–Low',
        ('Engineering', 'Software'): 'High',
        ('Engineering', 'Training'): 'Medium–High',
        ('Engineering', 'Travel'): 'Low',

        ('Marketing', 'Meals'): 'High',
        ('Marketing', 'Office Supplies'): 'Medium',
        ('Marketing', 'Software'): 'Medium–High',
        ('Marketing', 'Training'): 'Medium',
        ('Marketing', 'Travel'): 'High',

        ('Sales', 'Meals'): 'High',
        ('Sales', 'Office Supplies'): 'Low',
        ('Sales', 'Software'): 'Medium–High',
        ('Sales', 'Training'): 'Medium–High',
        ('Sales', 'Travel'): 'High',

        ('HR', 'Meals'): 'Medium',
        ('HR', 'Office Supplies'): 'Medium',
        ('HR', 'Software'): 'Low',
        ('HR', 'Training'): 'High',
        ('HR', 'Travel'): 'Medium',

        ('IT', 'Meals'): 'Low',
        ('IT', 'Office Supplies'): 'Medium',
        ('IT', 'Software'): 'High',
        ('IT', 'Training'): 'High',
        ('IT', 'Travel'): 'Low',
    }

comparison = []
for dept in pivot_dev.index:
        for cat in pivot_dev.columns:
            actual_dev = pivot_dev.loc[dept, cat]
            tier = expected_tiers.get((dept, cat), 'Medium')
            benchmark = {
                'Low': g1_mid,
                'Medium–Low': g2_mid,
                'Medium': g3_mid,
                'Medium–High': g4_mid,
                'High': g5_mid,
            }[tier]
            comparison.append((dept, cat, round(actual_dev - benchmark, 2)))

df_comp = pd.DataFrame(comparison, columns=['department', 'category', 'dev_from_expected'])
pivot_expected = df_comp.pivot(index='department', columns='category', values='dev_from_expected')

generate_benchmark_heatmap(pivot_expected, "charts/benchmark_heatmap.png") 
